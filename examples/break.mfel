let range = @std.iter.range;

function f2(i) {
    # the break is pushed up (like an exception) until a loop catches it
    break i;
    @println("will never print");
}

function f1(x,a,b) {
    for i in range(a,b) {
        @println("f1 ",i," before");
        if i > x { 
            # also works inside a second block...
            { 
                # this pushes the value of i up until it hits a loop
                # the loop will abort and return what the break statement pushed up
                f2(i); # same as: break i; 
                @println("will never print");
            }
        };
        @println("f1 ",i," after");
        i
    }
    # the loop will return the value pushed by break or the last expression (i in this case)
};

@test("f1(5,1,9)",6);
@test("f1(15,1,9)",8);

