###
### throw pushes up an exception (like break, return and continue)
### it will be passed up by most code expressions.
### the only way to catch and unwrap it is with the try ... catch construct.
### system errors are also caught with try ... catch.
### @error is used to generate a system error from your code
### @make_error is used to create an error object (to compare with a caught error or to throw)
###
### expr! is a shortcut for: try expr catch ex { ex } 
### it unwraps an exception (thrown or system error) but leaves normal values as is
###

function unwrap_before_mult(x) {
    3 * try f1(x) catch x {
        if @is_error(x) { 3 }
        else {x}
    }
}

function unwrap_after_mult(x) {
    (f1(x) * 3)!
}

function try_catch(x) {
    try f1(x) * 3 catch y {
        if @is_error(y) {
            @string(y)
        } else {
            y + 1
        }
    }
}

function f1(x) {
    f2(x) * 5
}

function f2(x) {
    if x >= 10 {
        throw 10;
        @println("unreachable");
    }
    if x > 8 {
        @error("x is 9");
        @println("unreachable");
    }
    if x > 7 {
        throw @make_error("x is 8");
        @println("unreachable");
    }
    x
}

@test("unwrap_before_mult(7)",105);
@test("unwrap_before_mult(8)",9);
@test("unwrap_before_mult(9)",9);
@test("unwrap_before_mult(10)",30);

@test("unwrap_after_mult(7)",105);
@test("unwrap_after_mult(8)",@make_error("x is 8"));
@test("unwrap_after_mult(9)",@make_error("x is 9"));
@test("unwrap_after_mult(10)",10);

@test("try_catch(7)",105);
@test("try_catch(8)","x is 8");
@test("try_catch(9)","x is 9");
@test("try_catch(10)",11);
