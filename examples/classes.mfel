### the Point example is how to build the equivalent of a class using 
###  - a module for the class (with class variables and methods)
###  - a new method that returns an object (instance of the class)
###
### the Counter example is an object factory with no equivalent
###  to class variables and methods
###

let Point = fun {
    let count = 0; # class variable
    defcon new x y {
        count += 1;
        defun add point {
            new(x + point.x,y + point.y)
        }
        defun add_assign point {
            x += point.x;
            y += point.y;
        }
        defun __str__ {
            "Point("+x+","+y+")"
        }
        @println("=> point instance ",count,": ",__str__());
    }
    @self
}();

defcon Counter start end {
    defun count {
        if start > end {
            return nil;
        }
        let count = start;
        start += 1;
        count
    }
}

let p1 = Point.new(3,4);
let p2 = Point.new(5,6);
let p3 = p1.add(p2);
@println(p1);
@println(p2);
@println(p3);
p3.add_assign(p3);
@println(p3);

let c1 = Counter(10,20);
let c2 = Counter(0,5);

for i in c1.count {
    @println("c1 is ",i);
}
for i in c2.count {
    @println("c2 is ",i);
}
