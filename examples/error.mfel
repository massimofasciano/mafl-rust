###
### there are 2 types of errors:
### - system errors
### - error objects (can be thrown)
### system errors are generated whenever the runtime encounters a problem. they are passed up internally.
### when caught in a try...catch, they are converted to an Error object with an inner string that can be inspected.
### usually, this is how you deal with errors. you can generate a system error in your code with @error(...).
###
### you can also manually create an error object with @make_error. it just creates an object of error type. nothing more.
### that can be convenient when you want to compare a caught error with an error object without converting to a string.
###
### you can also use a "throw" statement to push an error object up like any other exception value.
###
### expr! is a shortcut for: try expr catch ex { ex } 
### it unwraps an exception (thrown or system error) but leaves normal values as is
###

function test1(f,x) {
    try 1 + f(x) catch z {
        @println("- I caught this exception: ",z);
        if @is_error(z) {
            @println("- It's an error");
            @println("- The value of the error is: ",@string(z));
            "caught!"
        }
    }
}

function test2(x) {
    1 / x
}

function test3(x) {
    "hello" < x
}

function test4(x) {
    if x > 3 {
        throw @make_error("x is too big!");
    }
    x
}

function test5(x) {
    @error("there is a problem with ",x);
}

function test6(x) {
    let r = test4(x)!;
    if @is_error(r) { return 6 };
    x
}

@test("test1(test2,2)",1.5);
@println();
@test("test1(test2,0)","caught!");
@println();
@test("test1(test3,10)","caught!"); 
@println();
@test("test1(test4,1)",2); 
@println();
@test("test1(test4,10)","caught!"); 
@println();
@test("test1(test5,0)","caught!"); 
@println();
@test("test1(test6,1)",2); 
@println();
@test("test1(test6,10)",7); 
