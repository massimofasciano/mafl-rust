### a lambda is a nameless function
### it captures references to bindings in the definition context

let global := 0;
@println("global = ",global);

let f1 := lambda (x) { x + 10 + global };

### note that "let" is not self-delimiting so it needs a semicolon
###  when used as a statement


### a function definition is a syntactic shortcut for
###  assigning a lambda to a variable
### 2 important differences:
###  - no semicolon necessary (self-delimiting)
###  - it binds its name to the lambda (for safe recursion
###    without depending on external context at call site)

function f2 (x) { 
    x + 10 + global
}

@println(f1(0));
@println(f2(0));

# we are changing this inside the environment that is captured by the lambdas
global := global + 1; 
@println("global = ",global);

@println(f1(0));
@println(f2(0));

# we are adding a new binding called "global" (it shadows the old one)
# this will not change the binding that was captured by the lambdas
let global := global + 1; 
@println("global = ",global);

@println(f1(0));
@println(f2(0));

