let z = 30;

module test (z) {
    let x = 10;
    let y = 20;
    let f = lambda() { x + y };
    module m (x,y,z) {
        # shadows x and y (by value)
        let f = lambda() { x + y + z };
    }
}

function bindings(mod) {
    let arr = @array(mod)!; # exclam catches and unwraps an exception
    if @is_error(arr) {
        @print(mod)
    } else {
        @print("{ ");
        for binding in @array(mod) {
            let [var,val] = binding;
            @print(var, "=");
            bindings(val);
            @print(" ");
        }
        @print("} ");
    }
}

bindings(test); @println();

let test2 = @copy(test);

#@println(test,test2);

@set(test,"x",2000);
@println(test.x);
@println(test2.x);
@println(test.f());
@println(test2.f());
@println(test.m.f());
@println(test2.m.f());

@set(test.m,"x",1000);
@println(test.f());
@println(test2.f());
@println(test.m.f());
@println(test2.m.f());

@bind(test,"q",300);
@println(test.q);
@println(test2.q!);

let a = [1,2,3,[4,5,6,[7,8,9]]];
let b = @copy(a);

@println(a);
@println(b);

a[3][0]=14;
a[3][3][2]=18;

@println(a);
@println(b);

function plus(x,y) { x + y }
@println(4 `plus` 6);

let v = 200;
let r = &v;
let c = v;

#r = &v;

@println(v," ",c," ",r);
c = c + 1;
@println(v," ",c," ",r);
v = v + 10;
@println(v," ",c," ",r);
r = r + 100;
@println(v," ",c," ",r);

{ let q = &c; q = q + 1; }

@println(v," ",c," ",r);

let reftest = lambda (r) {
    r = r + 1;
    @println("inside: ",r);
};

reftest(v);
@println("outside: ",v);
reftest(&v);
@println("outside: ",v);

let x = 100000;
let y = 100;
function dynclo(x) {
    x + y + zzz
}

let y = 10000;
let zzz = 1;

@println(dynclo(10));

let start = @now();
for i in [1,2,3,4,5] {
#    @sleep(i);
    @println(@now()-start);
}
let args = @array(0,nil);
@append(args,10);
@println(@call(dynclo,args));

function f(x,y) { 
    let d = @dict();
    @insert(d,"r",[x * y, x + y, x / y]);
    d 
}
let d = @dict();
@insert(d,"hello",[f]);
let a = [1,2,[d],4,5];

@println(a[2][0].hello[0](3,4).r[2]);

a[3] = 20;
@println(a[3]);

let d1 = @dict();
let d2 = @dict();
@insert(d2,"data",[10]);
@insert(d1,"d2",[d2]);
let a1 = [1,2,d1,4,5];
a1[2].d2[0].data[0] = a1[2].d2[0].data[0] + 1;
@println(a1[2].d2[0].data[0]);

let [q,w,e,r,t,y] = a1;
@println([q,w,r,t,y]);

let str = "hello world!";
#str[11] = '_'; # strings are immutable
@println(str[11]);

let arr1 = [1,2,3];
let arr2 = arr1;
let arr3 = &arr1;

@println(arr1,arr2,arr3);

arr1[1] = 12;

@println(arr1,arr2,arr3);

@append(arr1,4);

@println(arr1,arr2,arr3);

let range = @std.iter.range;

for i in range(0,10) {
    @println(i," before");
    if i > 5 { break i };
    @println(i," after");
} 

module TestSelf () {
    let o = object {
        let x = 10;
        function f() {
            @self.x
        }
    };
}

@println(TestSelf.o.f());

let f = context () {
    let rec;
    let rec2;
    rec = lambda (x) {
        if x > 10 { rec2(x) }
        else { rec(x+1) }
    };
    rec2 = lambda(x) {
        if x > 20 {
            rec(x // 10)
        } else {
            x * 10
        }
    };
    rec
};

@test("f(1)",110);
@test("f(50)",110);
#@println(f);
