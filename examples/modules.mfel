### modules can be manipulated as first-class objects in the language
###
### a module block starts with an empty "local" context
### and adds bindings for a list of variables from the 
### external context ("copies" by value)
###
### modules can be manipulated as dictionaries (@get, @set, @insert)
### field notation is supported (read-only): obj.x, obj.get_y()
### they can be used like "objects" or "packages" in other languages
### 

let y := 30;
module mod (y) {
    # y gets shadowed by the module
    let x := 10;
    let get_x := lambda() {x}; 
    let get_y := lambda() {y};
    let set_x := lambda(new_x) {x := new_x};
    let set_y := lambda(new_y) {y := new_y};
}

@println(mod.get_x());
@println(mod.y);
mod.set_x(mod.x + 1);
mod.set_y(mod.y + 5);
@println(mod.x);
@println(mod.get_y());
@println(y);
@insert(mod,"z",50); # adds z to mod from outside
@println(mod.z);
@println(z); # not found
@set(mod,"x",100);
@println(mod.get_x());

