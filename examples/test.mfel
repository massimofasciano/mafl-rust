let z := 30;

module test (z) {
    let x := 10;
    let y := 20;
    let f := lambda() { x + y };
    module m (x,y,z) {
        # shadows x and y (by value)
        let f := lambda() { x + y + z };
        #let c2 := @context;
    }
    #let c1 := @context;
}

function bindings(mod) {
    let arr := @array(mod);
    if @type(arr) == "Error" {
        @print(mod)
    } else {
        @print("{ ");
        for binding in @array(mod) {
            let var := binding(0);
            let val := binding(1);
            @print(var, "=");
            bindings(val);
            @print(" ");
        }
        @print("} ");
    }
}

bindings(test); @println();

let test2 := @copy(test);

#@println(test,test2);

@set(test,"x",2000);
@println(test.x);
@println(test2.x);
@println(test.f());
@println(test2.f());
@println(test.m.f());
@println(test2.m.f());

@set(test.m,"x",1000);
@println(test.f());
@println(test2.f());
@println(test.m.f());
@println(test2.m.f());

@bind(test,"q",300);
@println(test.q);
@println(test2.q);

let a := [1,2,3,[4,5,6,[7,8,9]]];
let b := @copy(a);

@println(a);
@println(b);

a(3)(0,14);
a(3)(3)(2,18);

@println(a);
@println(b);

def plus(x,y) { x + y }
@println(4 `plus` 6);

let v := 200;
let r := &v;
let c := v;

#r := &v;

@println(v," ",c," ",r);
c := c + 1;
@println(v," ",c," ",r);
v := v + 10;
@println(v," ",c," ",r);
r := r + 100;
@println(v," ",c," ",r);

let q = &c in q := q + 1;
@println(v," ",c," ",r);

let reftest := function (r) {
    r := r + 1;
    @println("inside: ",r);
};

reftest(v);
@println("outside: ",v);
reftest(&v);
@println("outside: ",v);

let x := 100000;
let y := 100;
def dynclo(x) {
    x + y + zzz
}

let y := 10000;
let zzz := 1;

@println(dynclo(10));


