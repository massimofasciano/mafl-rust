let z := 30;

let test := module (z) {
    let x := 10;
    let y := 20;
    let f := closure() { x + y };
    let m := module (x,y,z) {
        # shadows x and y (by value)
        let f := closure() { x + y + z };
        let c2 := @context;
    };
    let c1 := @context;
};

let test2 := @copy(test); # only works at top level!!!

@set(test,"x",2000);
@println(test.f());
@println(test2.f());
@println(test.m.f());
@println(test2.m.f());

@set(test.m,"x",1000);
@println(test.f());
@println(test2.f());
@println(test.m.f());
@println(test2.m.f());

@bind(test,"q",300);
@println(test.q);
@println(test2.q);
