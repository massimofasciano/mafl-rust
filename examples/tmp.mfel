let z = 100;

let p1 = module {
    let x = 10;
};
@println(p1);

let p2 = module {
    from p1 use x; use z;
    let y = x + 1;
};
@println(p2);

let p3 = module {
    z += 1;
};
@println(p3);

@println(z);

p2.x += 1;
@println(p2);
@println(p1);

let c1 = module {
    let count = 0;
    let new = cons y {
        count += 1;
        let x = 1;
        defun __str__ {
            "c1("+x+","+y+")#"+count
        }
    };
};

@println(c1.new(3));
@println(c1.new(4));

from @std.array use fold;

let p4 = module {
    from p2 use x y;
    let f = fun { x + y };
    let r = fold(\acc,x{acc*x},2,[4,5,6]);
};
@println(p4.f());
@println(p4.r);

let xxx = 42;
let p5 = module {
    let t = dyn { xxx += 1; @println(xxx); }
};
xxx *= 10;
p5.t();

let qw = 10;
module {
    test qw != qw;
    test qw + 3 expect qw+3;
};

[1,2,3,4].len();
"123456".array()
