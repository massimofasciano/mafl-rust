###
### unit testing
###

@println("*** UNIT TESTING ***");

# the test statement can be used for simple unit tests
test 2 + 3 expect 5;

# it evaluates the test expression and compares the result to the expect part.
# it prints a message indicating if the test passed or failed:
# test passed 2 + 3: result 5
# test failed 2 * 3: result 6 expected 5

# it can also be used as a boolean test by omitting the expect part
test 2 + 3 < 2 * 3;
# test passed 2 + 3 < 2 * 3

# unit test results are recorded by the interpreter and are summarized at the end of the execution
# they can also be looked at via the special variables @test_pass_count and @test_fail_count
test @test_pass_count expect 2;
test @test_fail_count expect 0;

###
### let: create variable bindings
###

@println("*** LET ***");

# this binds the name x to a memory cell containing the value 10
let x = 10;

# this binds the name x to another memory cell containing the value 20
# the previous x is still there but shadowed.
let x = 20;
# this becomes even more important when using nested code blocks with local scopes

# when a variable is shadowed in the same local context, like we just did above, it
# could be a mistake. normally, we declare with let and then modify with assignment.
# by default, the interpreter will not complain but this can be changed:
@pragma("shadow_local","warn"); # this will print a warning
let x = 20; # warning: shadowed x in local context.
@pragma("shadow_local","allow"); # default behavior: no warning
# @pragma("shadow_local","error"); # this would cause an error and abort the program

###
### assign and op-assign: change variable bindings
###

@println("*** ASSIGN ***");

let x = 10;
test x expect 10;

# this changes the content of the memory cell of x and places 20 into it
x = 20;
test x expect 20;

# a shortcut for x = x + 1;
# adds 1 to the value inside the cell
x += 1;
test x expect 21;
# many other op-assign combos exist like *= /= -= etc...

###
### fun: create anonymous functions
###

@println("*** FUN ***");

# closed function (no external variables): 3 arguments x, y and z
let f = fun x y z { x + y * z };
# you call a function by using a variable bound to it,
# followed by a comma separated list of arguments between a pair of parentheses.
test f(1,2,3) expect 7;

# open function: 2 arguments x and y, 1 free variable z
# a reference to z will be looked up when the function is defined
# and will be kept inside a closure (lexical binding)
let z = 40;
let f = fun x y { x + y * z };
test f(1,2) expect 81;

# if the original z is modified, the function will see the change because
# it kept a reference to it. the function can also change z and the outside
# context will see this change in the original.
z += 1;
test f(1,2) expect 83;

# if z is shadowed by a new binding after the function is defined, the old value
# is still used by the function.
let z = 50;
test f(1,2) expect 83;

# so a function acts as storage for captured variables. this is
# similar to an object or struct, but the captures are by reference.

# something like this can be used to create an iterator.
let counter = {
    let count = 0;
    fun {
        # this function captures a reference to the 
        # count variable and can update it when called.
        # the add-assign as an expression returns the
        # new value after mutation.
        count += 1 
    }
};

# each time the function is called, it returns a different value.
# the analogy with objects is quite clear here.
test counter() expect 1;
test counter() expect 2;
test counter() expect 3;

# when we need to refer to our anonymous function recursively, we can use the capture trick...
# - declare f (defaults to nil)
# - the fun expression will capture it by reference
# - store the function in the memory cell that was captured (circular reference)
let f;
f = fun x {
    if x <= 1 { x } else { x * f(x-1) }
};
test f(4) expect 24;
# works even if we change f
let g = f;
let f = fun x { 0 };
test g(4) expect 24;

# the "let rec" shortcut does this for us...
let rec f = fun x {
    if x <= 1 { x } else { x * f(x-1) }
};
test f(4) expect 24;
# works even if we change f
let g = f;
let f = fun x { 0 };
test g(4) expect 24;

# we can do mutual recursion (2 functions calling each other) with
# a variant of the capture trick...

# f1 captures the reference to f2 (bound to nil for now)
let f2;
let f1 = fun x {
    if x < 10 {
        x
    } else {
        f2(x)
    }
};
# f2 has captured f1 and replaced the f2 captured inside f1
f2 = fun x {
    if x > 20 {
        x
    } else {
        f1(-x)
    }
};
# we could also directly modify the f2 binding
# that is captured in f1 (if we had used let instead
# of assignment when declaring f2)
# f1.f2 = f2;

test f1(5) expect 5;
test f1(15) expect -15;
test f1(25) expect 25;

###
### a shortcut: \ instead of fun
###

@println("*** \\ = fun ***");

let f = \x{x+1};
# equivalent to let f = fun x { x + 1 }
test f(1) expect 2;

# works with multiple arguments and can use commas if it looks better
let f = \x,y,z{x*y*z};
test f(1,2,3) expect 6;

# works with no arguments
let f = \{1};
test f() expect 1;

# this short syntax looks good when passing a function to another function (with map, filter, etc...)

###
### currying
###

@println("*** CURRYING ***");

# when arguments are missing in a function call, currying is performed automatically

let add = \x,y{x+y}; # a 2-arg function
let add5 = add(5);

test add(2,3) expect 5;
test add5(2) expect 7;

# extra arguments are also handled automatically when it makes sense to do so

let add = \x{\y{x+y}}; # a 1 arg function returning a 1 arg function
let add5 = add(5);

test add(2,3) expect 5;
test add5(2) expect 7;


###
### code blocks
###

@println("*** BLOCKS ***");

# we have seen blocks in the section about functions but code blocks can be used anywhere
# in place of an expression. they create a local scope for variables.

let x = 20;
test x expect 20;
{
    x += 1; # we are still working on the same x as outside
    test x expect 21;
    let x = 30;
    x += 1; # we are working on a local binding of x that shadows the other
    test x expect 31;
}
# as soon as we exit the block, the old binding comes back
test x expect 21;

# a code block has a value as an expression: the value of the last item in the block
let v = { 
    let x = 20;
    x += 2;
    x
};
test v expect 22;

# note that we did not put a semicolon on the last expression
# if we put one, it would be equivalent to having an implicit nil 
# as the last expression in the block
let v = { 
    let x = 20;
    x += 2;
    x; # this does nothing but it's valid
};
test v expect nil;

###
### special functions: cons, module and dyn/dynmut
### 

@println("*** SPECIAL FUNCTIONS: CONS ***");

# we saw in the section about functions that they capture bindings by reference,
# acting like objects.

# let's talk about a few constructs that will be useful:
# 1- @self
# 2- dot notation for field access

# we have a builtin variable called @self that always refers to the current execution context
# (all of the active variable bindings).
# we can use the dot notation to access a variable inside a context, and this applies to @self also.

let s = 1;
# the variable s captured by the current context is the variable s (trivial)
test @self.s expect s;

# let's create a function and set a few local bindings inside
let pf = fun x {
    let y = x + 1;
    # at this point, our local context has:
    # - x: passed when called
    # - y: created inside the function
};
let pv = pf(5);
# what we did is useless because the function returns nil (last statement terminated by semicolon)
test pv expect nil;

# let's make the function return a copy of its active context instead:
let pf = fun x {
    let y = x + 1;
    @self
};
let pv = pf(5);
# at this point, pv is not nil but instead it's a closure
# that captures the environment inside pf when it finished (with x and y bound).

# this is really starting to look like an object or a struct (with fields)...
test pv.x expect 5;
test pv.y expect 6;

# what we created is called a constructor. it's a function that returns a context that
# can be used as an object.

# we have a shortcut for this (cons instead of fun):
let pf = cons x {
    let y = x + 1;
};
let pv = pf(5);
test pv.x expect 5;
test pv.y expect 6;
# with cons we can build instances/ojects/structs

@println("*** SPECIAL FUNCTIONS: MODULE ***");

# another special shortcut exists for the following special case:
# we want to create a namespace (something like a package/module).

# we could do this with cons by using no arguments and
# immediately calling the constructor to get an instance.
let m = cons {
    let inv = \x{1/x};
}();
test m.inv(2) expect 0.5;

# a shortcut called module exists for this:
let m = module {
    let inv = \x{1/x};
};
test m.inv(2) expect 0.5;

# cons and module are just nice syntax. fun can cover both cases and more.

# with the use and from...use constructs, we can inherit/capture bindings:
let m2 = module {
    use pv;
    from m use inv;
    let x = pv.x;
    let y = pv.y;
};
pv.x += 10; 
# by changing pv.x we also affect m2.pv.x because they are bound by reference
test m2.pv.x expect 15;
# but m2.x is a copy
test m2.x expect 5;
# the inv function is inherited
test m2.inv(m2.y) expect 1/6;

@println("*** SPECIAL FUNCTIONS: DYN and DYNMUT ***");

# we have seen that functions are basically objects (they have data and code)

# sometimes, we don't want to capture any state at evaluation time but leave the 
# binding of the variables to the call site: this is what dyn is for.

let g = 10;
let ffun = fun x { g + x };
let fdyn = dyn x { g + x };

test ffun(5) expect 15;
test fdyn(5) expect 15;

# we shadow g (bring another g into scope)
# this is not the same thing as mutating the value of the old g
let g = 20;
# fun binds any variable at definition time (it captures a ref to the g that was in scope)
test ffun(5) expect 15;
# dyn evaluates variables at call time
test fdyn(5) expect 25;

# a dyn function runs in a new empty context that inherits the parent context at the call site.
# this means it can read and modify existing variables from the parent.
# any new binding created with let will be local.

let g = 100;
let fdyn = dyn x { g += x; let y = 200; };
fdyn(1);
test g expect 101;
test @type_of(y!) expect "Error";

# a dynmut function runs in the parent context at the call site.
# this means it can read and modify existing variables from the parent.
# it can also create and destroy bindings in the parent context.

let g = 100;
let h = 500;
let fdynmut = dynmut x { g += x; let y = 200; forget h; };
fdynmut(1);
test g expect 101;
test y expect 200;
test @type_of(h!) expect "Error";

# we will see later that dyn and dynmut, like @eval don't work well
# when called inside lexical binding constructs like "fun/cons/module".

###
### base types
###

@println("*** BASE TYPES ***");

# integer
test 1+1 expect 2;
test 5//2 expect 2; # integer division
test 13%4 expect 1; # modulo

# float
test 1/2 expect 0.5;
test 4.5*2 expect 9;

# boolean
test true;
test not false;
test 1 < 3;

# character and string
let s = "hello there!";
test "hello" + " " + "there" + "!" expect s;
test s[1] expect 'e';
test s[-1] expect '!';

# array
let arr = [1,2,3,4,5];
arr[3] += 10;
test arr expect [1,2,3,14,5];

# closure (the result of evaluating a fun/cons/module)
# it bevaves like an object with fields
let o = module {
    let x = 1;
    let y = 2;
};
test o.x+o.y expect 3;
let c = cons x y {
    let to_string = \{ x + ":" + y }
};
let c1 = c(1,2);
let c2 = c(2,3);
test c1.y expect c2.x;
test c1.to_string() expect "1:2";

###
### standard library vs builtin functions
###

@println("*** BUILTINS AND STD ***");

# we need special builtin variables functions to perform operations that cannot be written in the language
# for example: 
# - operating system interaction
# - operations on atomic types
# - faster versions of functions

# the functions do not support currying: they must be called with the proper number of arguments
# they support a variable number of arguments and overloading based on number of arguments
# they can be passed to other functions as long as no currying occurs
# they are always prefixed with @ to separate them from user variables

# here is a description of some of the builtin functions and variables (more details in the source code of the interpreter):

# @args: the command line arguments as an array of strings
# @std: the standard library as module
# @self: the current excecution context (as an object)
# @version: the language version as a string (ex: "0.8.3")
# @os: the operating system family as a string (ex: "linux", "windows", etc...)
# @test_pass_count: number of passed tests
# @test_fail_count: number of failed tests

# @getenv(str): gets the value of an environment variable from the os (as a string, or nil if not found)
# @pragma(str,str): set internal interpreter options
# @call(f,[arg1, ..., argn]): call a function taking arguments from an array
# @print(...): display arguments separated by spaces (will call .to_string() on objects if defined)
# @println(...): print followed by a newline
# @debug(...): like print but in debug format
# @debugln(...): like println but in debug format
# @error(str): trigger an error
# @make_error(str): construct an error object without triggering an error
# @eval(str): evaluate a string as program code (in current context)
# @include(str): same as eval but from a file
# @readfile(str): contents of file as a string
# @readline(): read a line from the terminal as a string
# @pow(x,y): x to the power of y
# @exp(x): e to the power of x
# @log(x): base e log of x
# @len(any): length of something (type-specific)
# @to_integer(any): convert to an integer (if possible)
# @to_float(any): convert to a float (if possible)
# @to_string(any): convert to a string (will call .to_string() on objects if defined)
# @type_of(any): the type of something as a string (ex: @type_of([1,2] returns "Array"))
# @make_array(size, init): make an array of a certain size with an initial value for each element
#                         if init is a function, it is called with the index of each element
# @to_array(any): converts something to an array
#   - an array is copied (with deep copy)
#   - a string is converted to an array of characters
#   - an object is converted to an array of [key,ref] pairs where key is a string and ref is a reference
# @slice(seq, start, end): returns a slice of the same type from start to end (ex: @slice("12345",1,3) returns "234")
# @copy(any): shallow copy of something
# @clone(any): deep copy of something
# @append(array, element): mutably adds element at end of array
# @make_dict(): create an empty closure (to be used as a dict)
# @extend_dict(parent): creates a new closure with a prent context (linked hashmaps)
# @flatten_dict(dict): creates a new closure with flat references to dict members
# @get(any, key): get a member from a container (works for objects and arrays)
# @set(any, key, value): set a member in a container (works for objects and arrays)
# @insert(dict, key, value): adds a binding to a dict
# @removes(dict, key, value): removes a binding from a dict
# @now(): the current time as float seconds since UNIX EPOCH
# @sleep(seconds): sleep for float seconds
# @flatten_self(): returns a flattened version of @self
# @lines(str): splits string into array of strings (one per line)
# @split(str, pattern): splits string into array of strings (pattern is regex separator)
# @trim(str): removes whitespace before and after a string
# @matches(str, regex): returns an array of all substrings matching regex
# @command(strs): runs a system command from an array of strings (first is command name, rest are args)
# @sort(array): mutably sorts an array
# @sort_by(compare, array): mutably sorts an array using a compare function
# @randint(min, max): returns random integer between min and max
# @random(): returns random float between 0 and 1

@println(c1,c2,o.x); # converts all arguments to strings and prints them, separated by spaces
# this prints: 1:2 2:3 1
# note that when an object has a to_string method, it is called by @println and @to_string
test @to_string(c1) + " " + @to_string(c2) + " " + @to_string(o.x) expect "1:2 2:3 1";

let s = "hi there!";
let a = [1,2,3,4];
test @len(s) expect 9;
test @len(a) expect 4;

test @to_string(3) expect "3";
test @make_array(3,1) expect [1,1,1];
test @make_array(3,\x{x+1}) expect [1,2,3];
test @to_array("hello") expect ['h','e','l','l','o'];

test @lines("line1\nline2") expect ["line1","line2"];

test @slice([1,2,3,4,5,6],2,4) expect [3,4,5];

let arr = [4,6,7,3,2];
@sort_by(\a,b{a>b},arr);
test arr expect [7,6,4,3,2];

# this next one only works on unix systems with the expr utility
if @os == "linux" {
    test @trim(@command("expr",1,"+",3)) expect "4";
    test (@to_float(@command("expr",1,"+",3)) / 2)! expect 2;
} else {
    @println("skipping test on ",@os);
}

let s = "1,2,3, 4,5 ,6";

# split a string using a delimiter (basic string)
let delim = ",";
let parts = @split(s,delim);
test parts expect ["1","2","3"," 4","5 ","6"];

# trim whitespace before and after strings
let trimmed = @std.iter.map(@trim,parts);
test trimmed expect ["1","2","3","4","5","6"];

# split a string using a delimiter (regular expression)
let rdelim = "[ ,]+";
let parts_regex = @split(s,rdelim);
test parts_regex expect ["1","2","3","4","5","6"];

# gather all strings matching regular expression
let regex = "[0-9]+";
let matches = @matches(s, regex);
test matches expect ["1","2","3","4","5","6"];

# we can run arbitrary code from a string with @eval
@eval("let abc = 10; abc += 1");
test abc expect 11;

# we have already seen the @self special variable

# the @std special variable points to a module that is
# built into the interpreter but using native language
# constructs instead of interpreter (Rust) code.

from @std.array use map fold;
test map(\x{1/x},[1,2,3,4,5]) expect [1,1/2,1/3,1/4,1/5];
test fold(\a,x{a+x},0,[1,2,3,4,5]) expect 15;

# the standard library provides the "builtin" module
# that exposes normal functions for many of the builtins. 

# this allows the use of builtins as parameters to other functions
# with full support for currying (but without overloading and varargs)

from @std.utils use flip;
from @std.builtin use split;
test map(flip(split,":"), ["1:2:3","4:5:6"]) expect [["1","2","3"],["4","5","6"]];

###
### basic control
###

@println("*** BASIC CONTROL ***");

# if with optional else
let rec f = fun x {
    if x < 2 { 
        x 
    } else {
        2 * f(x - 1)
    }
};
test f(5) expect 16;
# unless is if with the test inverted and no else block

# while
let r = 10;
let i = r;
while i > 0 {
    r *= i;
    i -= 1;
}
test r expect 36288000;

# do ... while (test) has the test after the body
let r = 10;
let i = r;
do {
    r *= i;
    i -= 1;
} while (i > 0);
test r expect 36288000;

# loop is an infinite loop. you can only escape with exceptions (break, return, etc...)
let r = 10;
let i = r;
loop {
    if i <= 0 { break; } 
    r *= i;
    i -= 1;
}
test r expect 36288000;

###
### for..in and iterators
###

@println("*** ITERATORS AND FOR ***");

# an iterator is a function that returns a possibly different value on each call or nil when finished
# we had an example in the sections above (counter).
# assuming it's still in scope...
test counter() expect 4;
test counter() expect 5;
test counter() expect 6;

# you can use an iterator in a for loop
# assuming the same counter is still in scope, it will return 7, 8, 9, ...
let r = 1;
for c in counter {
    if c >=10 { break }
    r *= c;
}
test r expect 504;
test counter() expect 11;

# arrays can also be used in place of iterators
let r = 1;
for a in [1,2,3,4,5,6] {
    r *= a;
}
test r expect 720;

# the standard library contains functions that work on iterators
from @std.iter use range collect;
test collect(range(3,6)) expect [3,4,5,6];
# map was already imported above from @std.array but that is simply an alias to @std.iter.map
test map(\x{x*10},range(0,9)) expect [0,10,20,30,40,50,60,70,80,90];

# because objects and functions are the same in our language, we can't
# directly iterate on the key/value binding pairs of an object
# (treating it like a dictionary). 

# the trick is to convert the object to an array of [key, &value] pairs
# refer to the section on references for more details on the ref/deref/deref-assign syntax.

let x = 10;
let y = 20;
let m = module {
    use x y;
};

for kv in @to_array(m) {
    let [k,v] = kv; 
    # k is a string, v is a ref to a value
    v <- $v + 1;
    # we can access the value with the $ (deref) operator on the reference
    # we can mutate the target with the <- (deref-assign) operator on the ref
}
test [x,y] expect [11,21];

###
### destructuring
###

@println("*** DESTRUCTURING ***");

# we can split an array with a let binding. 
# this is useful when returning multiple values
# from a function.

let div_mod = fun x y {
    [x // y, x mod y]
};
let [q,r] = div_mod(13,5);
test q expect 2;
test r expect 3;

###
### pipeline operator
###

@println("*** PIPELINE ***");

# sometimes we have a series of 1 argument functions to apply one after the other
# the pipeline syntax makes this easier

# x | f1 | f2 | f3 | f4
# is equivalent to
# f4(f3(f2(f1(x))))

from @std.utils use flip;
from @std.math use pow add mul;

test 2 | flip(pow,2) | add(1) | mul(10) expect 50;

###
### comments
###

@println("*** COMMENTS ***");

# a line comment starts with # and ends with a new line

@println("this code is active"); # but this is a comment

(# 
a block comment starts with a (# and ends with #)
as you can see above, they can be nested.
#)

# note how block comments can be commented out by 
# putting a # infront of the opening (#
# and the closing #) is self-commenting.
(# this is really cool when you want to activate and deactivate blocks quickly #)

#(#
@println("this code will run because the start of the block comment is commented out");
#)

@println("comments are not (# active #) inside #of strings");

###
### exceptions
###

@println("*** EXCEPTIONS (SPECIAL CONTROL) ***");

# exceptions are constructs that allow exiting the normal flow of operations
# and possibly returning a value

# we have multiple kinds:
# - exit: exits the first block it finds (with optional value)
# - break: exits the first loop it finds (with optional value)
# - continue: next iteration of the first loop it finds
# - return: exits the first function it finds (with optional value)
# - throw: has to be caught manually (with optional value)
# - error: has to be caught manually

let i = 0;
let r = {
    i += 1;
    exit i;
    i += 1
};
test r expect 1;

let i = 0;
let r = loop {
    { exit; i += 1; }
    i += 1;
    break i;
    i += 1
};
test r expect 1;

let f = fun {
    let i = 0;
    let r = loop {
        { exit; i += 1; }
        i += 1;
        return 20;
        i += 1
    };
    r
};
test f() expect 20;

let fe = fun {
    let i = 0;
    let r = loop {
        { exit; i += 1; }
        i += 1;
        throw 30;
        i += 1
    };
    r
};
let tc = try fe() catch e {
    e + 1
};
test tc expect 31;

let err = try 1/0 catch e { @to_string(e) };
test err expect "division by zero";

# the ! operator can unwrap an exception. expr! is equivalent to try expr catch e { e }

test fe()! * 10 expect 300;
test 10! * 10 expect 100;
test @to_string((1/0)!) expect "division by zero";

###
### dot notation on builtin types
###

@println("*** DOT NOTATION ON BUILTINS ***");

# for non-objects, the interpreter transforms 
# o.f() into @std.methods.Type.f(o) where Type is @type_of(o)

test [1,2,3,4].len() expect 4;
test "123".to_array() expect ['1', '2', '3'];
test "1\n2".lines() expect ["1", "2"];
test "1, 2 ,3,4".split(" *, *").map(@to_integer) expect [1,2,3,4];
test 2.exp() expect @exp(2);
test 4.mul(5) expect 20;
test 1.to_string() expect "1";
test ['a','b','c'].to_string() expect "abc";
test [1,2,3].to_string() expect "[1, 2, 3]";

###
### the language has a reference type that links mutably to the storage cell of another value
### &x returns a reference to x as an object that can be manipulated
### $y dereferences y (if y is &x, $y will return the contents of x)
### y <- expr mutates the storage cell that reference y points to
###

@println("*** REFERENCE OBJECT AND DEREFERENCE ***");

let v = 200;  # v is bound to a storage cell S1 containing a reference to the value 200
let r = &v;   # r is bound to a storage cell S2 containing a reference to the cell S1 above
let c = v;    # v is bound to a another storage cell S3 containing a reference to the value 200

# so to simplify, we now have 2 "boxes" S1 and S3 with the value 200 and a box S2 referencing box S1.
test [v,c,$r] expect [200,200,200];

# we add 1 to the value inside cell S3 so now the value of c is 201
c = c + 1;
test [v,c,$r] expect [200,201,200];

# we add 10 to the value inside cell S1 so now the value of v is 210
# but r also points to the same cell via an indirection layer
# this is shown as ->210 if the value of r is printed 
v = v + 10;
test [v,c,$r] expect [210,201,210];

# here, we use the deref operator $ to fetch the value referenced by r (the contents of cell S1 via cell S2)
# we add 100
# and then we store the contents not the cell of r (S2) but in the cell pointed to by the cell of r (S1)
# so now v is 310 (cell S1) and r still points to it
r <- $r + 100;
test [v,c,$r] expect [310,201,310];

# here we take a reference to c and add 1 through that reference
# we do it inside a block scope so that q is only temporary
{ let q = &c; q <- $q + 1; }
# this adds 1 to c
test [v,c,$r] expect [310,202,310];

# a function that tests if it has a reference and increments through it
# if it's not a ref, the increment is only local
let reftest = fun r {
    from @std.types use is_ref;
    if is_ref(r) {
        r <- $r + 1;
    } else {
        r = r + 1;
    }
};

# v will not change
reftest(v);
test v expect 310;

# v will change
reftest(&v);
test v expect 311;

# here we deref r and add 50 but we place the result in cell S2
# so r is not a reference anymore...
r = $r + 50;
test [v,c,r] expect [311,202,361];

let o = module {
    let x = 1;
    let y = 2;
    let to_string = \{"(" + x + "," + y + ")"}
};
# we can also take a ref on an object field
let p = &o.x;
test @to_string(o) expect "(1,2)";
p <- 3;
test o.to_string() expect "(3,2)";
# but not on array elements (as of MFEL 0.3.2)

###
### the language also allows creating a variable binding that is linked
### to the same cell as another (aliasing).
###
### let ref x = y  creates a binding x that points to the memory cell of y (x is an alias of y)
### let x = y      creates a binding x that points to a new memory cell containing the same value as y (a copy)
### let x = &y     creates a binding x that points to a new memory cell containing a reference to the memory cell of y
###
### the explicit reference (&) exists because it is an actual object value that can be passed around (to functions)
###
### forget x       removes the binding x from the current context (can forget multiple bindings: forget x y z)
###

@println("*** LET REF AND FORGET ***");

let v = 10;
let ref w = v;
let r = &v;
let c = v;

# they are all 10 but r needs an explicit dereference operator
test [v,w,$r,c] expect [10,10,10,10];

# anything done to w is equivalent to doing it to v
w += 1;
test [v,w,$r,c] expect [11,11,11,10];

# the combination of let ref and forget can be used when creating objects that capture
# by reference from outside but want to change the name of the bindings

from @std.types use is_error;

let p = module {
    let ref z = v;
    forget v;
};

# the p object contains a single member called z that is aliased to v (from outside)
test p.z expect 11;
test is_error(p.v!);
test map(fun kv {let [k,v]=kv; [k,$v] }, @to_array(p)) expect [["z",11]];

p.z += 1;
# p.z is aliased to outside v
# w is aliased to v also
# they all point to the same cell so changing p.z also changes w
test w expect 12;

###
### copy/clone
###

@println("*** COPY / CLONE ***");

# @copy makes a shallow copy
# @clone makes a deep copy (not safe with cycles)
# they work on arrays and objects

let a = [1,2,[3,4],5];
let b = a;
let c = @copy(a);
let d = @clone(a);

test a expect [1,2,[3,4],5];
test b expect [1,2,[3,4],5];
test c expect [1,2,[3,4],5];
test d expect [1,2,[3,4],5];

b[1] = 12;

test a expect [1,12,[3,4],5];
test b expect [1,12,[3,4],5];
test c expect [1,2,[3,4],5];
test d expect [1,2,[3,4],5];

b[2][1] = 14;

test a expect [1,12,[3,14],5];
test b expect [1,12,[3,14],5];
test c expect [1,2,[3,14],5];
test d expect [1,2,[3,4],5];

@append(b,6);

test a expect [1,12,[3,14],5,6];
test b expect [1,12,[3,14],5,6];
test c expect [1,2,[3,14],5];
test d expect [1,2,[3,4],5];

@append(b[2],15);

test a expect [1,12,[3,14,15],5,6];
test b expect [1,12,[3,14,15],5,6];
test c expect [1,2,[3,14,15],5];
test d expect [1,2,[3,4],5];

###
### dict operations
###

@println("*** DICT FUNCTIONS ***");

### dict functions operate on objects (the captured data of functions)

let o = @make_dict();
@insert(o,"x",1);
@insert(o,"y",2);

test @get(o,"x") expect 1;
test @get(o,"y") expect 2;
test is_error(@get(o,"z")!);

let p = @extend_dict(o);  # p extends o (like inheritance)
@insert(p,"y",12);
@insert(p,"z",13);

test @get(p,"x") expect 1;
test @get(p,"y") expect 12;
test @get(p,"z") expect 13;

test @get(o,"x") expect 1;
test @get(o,"y") expect 2;
test is_error(@get(o,"z")!);

test is_error(@remove(p,"x")!); # we can't remove x because it belongs to our "parent"
test @get(p,"x") expect 1;

@set(p,"x",p.x + 1);
test @get(o,"x") expect 2;
test @get(p,"x") expect 2;

let pf = @flatten_dict(p);  # all references are now at the same level
@set(pf,"x",pf.x + 1);

test @get(pf,"x") expect 3;
test @get(pf,"y") expect 12;
test @get(pf,"z") expect 13;
test @get(p,"x") expect 3;
test @get(o,"x") expect 3;

test not(is_error(@remove(pf,"x")!)); # we can remove x because of the flattening
test is_error(@get(pf,"x")!);


###
### local/closed scoping
###

@println("*** CLOSED (local scoping) ***");

# sometimes we wish to control what variables are visible to our code from the current
# execution context. by default, a function will capture whatever it needs from outside.
# we can limit that with the closed construct. it limits access to only the
# listed variables (can be empty if none specified).

let x = 10;
let y = 20;
let z = 30;
let c = closed x y {
    x += 1;
    y += 1;
    try z += 1 catch e { }; # z is not visible
    x+y
};
test [c,x,y,z] expect [32,11,21,30];

# this is not a very useful construct but it can sometimes avoid problems
# when running code that cound affect the running context.

# let's imagine we are taking a string from the user and evaluating it.
# we might not want that evaluated code to change our execution environment.

closed x {
    # assume we read this from the terminal with let input = @readline();
    let input = "x += 100; try y += 100 catch e { }"; 
    @eval(input);
}
test [x,y] expect [111,21];

###
### calling dynamic constructs inside lexical constructs
###

@println("*** DYNAMIC INSIDE LEXICAL ***");

# fun/cons/module work via lexical binding: they capture the environment they need at the 
# point of definition in a closure. after that, they are self-contained objects.

# dyn/dynmut don't capture anything and rely on the environment at the call site.
# @eval also relies on the environment at the call site.

# if you call @eval or one of the dyns inside a closure (fun, etc...),
# they will fail if they rely on bindings that are not already captured.
# the bindings they require cannot be determined statically when parsing
# the functions.

let fdyn = dyn {
    g1
};
let fdynmut = dynmut {
    g2
};
let [g1,g2,g3,g4] = [1,2,3,4];
let m = module {
    use g1 g2 g3;
    # if we omit the use statement, we get binding not found errors for the 3 calls.
    let v1 = fdyn();
    let v2 = fdynmut();
    let v3 = @eval("g3");
    # not necessary to use g4 as it is captured by the closure automatically.
    let v4 = g4;
};
test [m.v1,m.v2,m.v3,m.v4] expect [1,2,3,4];

# normally, you don't need to manually declare captured variables in a function or module block.
# when dealing with the 3 types of dynamic calls, they must be declared.

###
### the standard library prelude
###

@println("*** @std.prelude() ***");

# @std.prelude() is a dynmut function that modifies the caller's environment.
# it adds a selection of useful functions.
# it's not safe to use inside a lexcical closure unless you
# insert "use" statements for each binding you use.

# here we create a closed environment and load the prelude...
let list = closed {
    @std.prelude(); # this puts a bunch of functions from @std into scope
    # flip, sub, map and range are imported by the prelude
    map(flip(sub, 5), range(3,9))
    # this applies \x{x-5} to each number of the range from 3 to 9
};
test list expect [-2, -1, 0, 1, 2, 3, 4];

###
### END (this program returns true if no tests failed)
###

@test_fail_count == 0
