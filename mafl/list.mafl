###
### implementing a linked list
###

let list = module {

    # private function: list object builder.
    # a list object has 
    # - 3 fields: is_empty, head, tail
    # - 2 methods: to_string, to_iter (returns an iterator for this object)
    let rec _make_list = cons is_empty head tail {
        from @std.iter use fold;
        let self = @self;

        # turns this list into an iterator
        let to_iter = fun {
            let lst = self;
            fun {
                if lst.is_empty { nil }
                else {
                    let next = lst.head;
                    lst = lst.tail;
                    next
                }
            }
        };

        # converts this list to a string
        let to_string = fun {
            if is_empty { "()" }
            else {
                fold(
                    \str,elem{str+" "+elem}, 
                    "(" + head, 
                    tail.to_iter()
                ) + ")"
            }
        };

        # appends other list at end of this list (mutates)
        let append = fun other {
            if other.is_empty { }
            else if is_empty {
                head = other.head;
                tail = other.tail;
                is_empty = false;
            } else if tail.is_empty {
                tail = other;
            } else {
                tail.append(other);
            }
        };

        # maps a function to this list (building a new list)
        let rec map = fun f {
            if is_empty { self }
            else { _make_list( false, f(head), tail.map(f) )}
        };

        # like map but replaces each element with the result in place
        let rec replace = fun f {
            if is_empty { }
            else { 
                head = f(head);
                tail.replace(f);
            }
        };

        # filters list via function (building new list)
        let rec filter = fun f {
            if is_empty { self }
            else if f(head) { _make_list( false, head, tail.filter(f) )}
            else { tail.filter(f) }
        };

        # removes from list via test function (mutates list)
        let rec remove = fun f {
            if is_empty { }
            else if f(head) { 
                if tail.is_empty {
                    head = nil; tail = nil;
                    is_empty = true;
                } else {
                    head = tail.head;
                    tail = tail.tail;
                    tail.remove(f)
                }
            } else { tail.remove(f) }
        };

    };

    # creates an empty list object
    let empty = fun { _make_list(true,nil,nil) };

    # creates a list object from a head (element) and a tail (list object)
    let build = fun head tail { _make_list(false,head,tail) };

    forget _make_list; # we don't need it anymore and this makes it private

    # creates a list object from an array
    let from_array = fun arr {
        let new_list = empty();
        let idx = @len(arr);
        while idx > 0 {
            idx -= 1;
            new_list = build(arr[idx],new_list);
        }
        new_list
    };

    # concatenates 2 lists (creating a new list)
    let concat = fun lst1 lst2 {
        from @std.iter use collect;
        from_array(collect(lst1.to_iter())+collect(lst2.to_iter()))
    };

};

# some tests...
{
    let L = list.build;
    let E = list.empty;
    # building recursively
    let lst1 = L(1,L(2,L(3,E())));
    # equivalent with pipe operator
    # let lst1 = E() | L(3) | L(2) | L(1);

    # building from an array
    let lst2 = list.from_array([1,2,3,4,5]);

    from @std.iter use collect map;
    from @std.math use add;

    # this returns an array
    test collect(lst1.to_iter()) expect [1,2,3];

    # this returns an array
    test map(add(1), lst2.to_iter()) expect [2,3,4,5,6];

    # this returns a list object
    test lst2.map(add(10)).to_string() expect "(11 12 13 14 15)";
    test lst1.map(add(1)).to_string() expect "(2 3 4)";

    # this modifies lst2
    lst2.append(lst1);
    test lst2.to_string() expect "(1 2 3 4 5 1 2 3)";

    # modifies the second element of lst1
    lst1.tail.head += 100;
    # but lst1 was grafted onto the end of lst2
    test lst1.to_string() expect "(1 102 3)";
    test lst2.to_string() expect "(1 2 3 4 5 1 102 3)";

    # replaces any x > 100 with x - 100 in lst2
    lst2.replace(fun x { if x > 100 {x - 100} else {x} });
    test lst2.to_string() expect "(1 2 3 4 5 1 2 3)";
    # lst1 is contained in lst2 so it is affected
    test lst1.to_string() expect "(1 2 3)";

    let lst3 = list.concat(lst1,lst2);
    test lst3.to_string() expect "(1 2 3 1 2 3 4 5 1 2 3)";

    from @std.logic use gt;
    from @std.utils use flip;
    # returns all values that are > 2
    test lst3.filter(flip(gt,2)).to_string() expect "(3 3 4 5 3)";

    # removes all occurrences of 2 from last1
    lst1.remove(\x{x==2});
    test lst1.to_string() expect "(1 3)";
    # lst2 still contains lst1 so it is affected
    test lst2.to_string() expect "(1 2 3 4 5 1 3)";
    # but lst3 was rebuilt via concat
    test lst3.to_string() expect "(1 2 3 1 2 3 4 5 1 2 3)";

    # add 3 to all members of lst1 (mutation)
    lst1.replace(add(3));
    test lst1.to_string() expect "(4 6)";
    # lst2 still contains lst1 so it is affected
    test lst2.to_string() expect "(1 2 3 4 5 4 6)";
    # but lst3 was rebuilt via concat
    test lst3.to_string() expect "(1 2 3 1 2 3 4 5 1 2 3)";

}
