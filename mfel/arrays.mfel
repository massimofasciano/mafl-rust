@include("mfel/stdlib.mfel");

@println("******* testing arrays *******");

### array syntax:
### literals: [expr,expr,expr,...,expr]             (as in many other languages)
### get value at index i for array a: a(i)          (like a function call)
### set value at index i to v for array a: a(i,v)   (like a function call)
### creation: @array(size,init)
###   init can be
###     - a constant
###     - a 1 argument function to be called for each index
### length of array a: @len(a)
### + operator creates a new array from the concatenation of 2 arrays

var a1 = [1,2,3,4];
@println("a1=",a1);

var a2 = @array(10,4);
@println("a2=",a2);

var a3 = @array(10, function(x) { 
    if x < 5 { 
        (x + 1) * 10 
    } else { 
        x + 1 
    } 
});
@println("a3=",a3);

var a4 = a1 + a2 + a3;
@println("a4=",a4);

@println("a1[2]=",a1(2));
var a1_2_3 = a1(2)+a1(3);
@println("a1[2]+a1[3]=",a1_2_3);
a1(2,a1_2_3); # a1[2]=a1_2_3
a1(0,100); # mutate a1 index 0
@println("a1=",a1); 

# defined in stdlib (included at the top): amap, afold, asum, aprod, areduce
@println("map (*100) a1=",amap(function(x){x*100},a1));
@println("sum(a1)=",asum(a1));
@println("prod(a1)=",aprod(a1));
var all_gt = function(n,arr) { 
    afold(
        function(x,y){x and y},
        true,
        amap(function(x){x > n},arr)
    )
};
@println("all_gt_0(a1)=",all_gt(0,a1));
@println("all_gt_5(a1)=",all_gt(5,a1));
@println("chain_div([9,3,4])=",areduce(function(x,y){x*1.0/y},[9,3,4]));

@println("******************************");
