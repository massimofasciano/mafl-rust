###
### this is the MFEL embedded standard library
###
### it is visible through the @std module (ex: @std.array.map)
###

## utility functions
let utils = module {
    let flip = fun f { fun x y { f(y,x) } };
    let rotr2 = flip;
    let rotr3 = fun f { fun m a1 a2 { f(a1,a2,m) } };
    let min = fun x y {
        if x < y {
            x
        } else {
            y
        }
    };
    let max = fun x y {
        if x > y {
            x
        } else {
            y
        }
    };
};

## builtin functions (proper fun versions)
let builtin = module {
    let to_string = fun x { @to_string(x) };
    let to_integer = fun x { @to_integer(x) };
    let to_float = fun x { @to_float(x) };
    let to_array = fun x { @to_array(x) };
    let lines = fun x { @lines(x) };
    let split = fun x y { @split(x,y) };
    let len = fun x { @len(x) };
    let sort = fun x { @sort(x) };
    let sort_by = fun f x { @sort_by(f,x) };
    let exp = fun x { @exp(x) };
    let log = fun x { @log(x) };
    let pow = fun x y { @pow(x,y) };
    let type_of = fun x { @type_of(x) };
};

## type-based functions
let types = module {
    let is_error = fun x { @type_of(x) == "Error" };
    let is_ref = fun x { @type_of(x) == "Ref" };
    let is_array = fun x { @type_of(x) == "Array" };
    let is_float = fun x { @type_of(x) == "Float" };
    let is_integer = fun x { @type_of(x) == "Integer" };
    let is_character = fun x { @type_of(x) == "Character" };
    let is_string = fun x { @type_of(x) == "String" };
    let is_nil = fun x { @type_of(x) == "Nil" };
    let is_boolean = fun x { @type_of(x) == "Boolean" };
    let is_exception = fun x { @type_of(x) == "Exception" };
    let is_closure = fun x { @type_of(x) == "Closure" };
    let is_function = is_closure;
    let is_module = is_closure;
    let is_object = is_closure;
    let is_dict = is_closure;
    let is_number = fun x { is_integer(x) or is_float(x) };
};

## math functions
let math = module {
    from builtin use exp log pow;
    let add = fun x y { x + y };
    let sub = fun x y { x - y };
    let mul = fun x y { x * y };
    let div = fun x y { x / y };
    let intdiv = fun x y { x // y };
    let mod_ = fun x y { x mod y }; # mod is reserved
    let modulo = mod_;
    let neg = fun x { -x };
};

## logic functions
let logic = module {
    let gt = fun x y { x > y };
    let lt = fun x y { x < y };
    let ge = fun x y { x >= y };
    let le = fun x y { x <= y };
    let eq = fun x y { x == y };
    let ne = fun x y { x != y };
    let not_ = fun x { not x }; # not is reserved
    let and_ = fun x y { x and y }; # and is reserved
    let or_ = fun x y { x or y }; # or is reserved
};

## time calculations
let time = module {
    let start = @now();
    let elapsed = fun {
        @now() - start
    };
};

## iterators and iterator functions
let iter = module {
    let range = fun start end {
        fun {
            if start <= end {
                let count = start;
                start += 1;
                count            
            }
        }
    };
    let collect = fun iter {
        let out = @make_array(0,nil);
        for e in iter { @append(out,e); }
        out
    };
    let map = fun f iter {
        let out = @make_array(0,nil);
        for e in iter { @append(out,f(e)); }
        out
    };
    let fold = fun f acc iter {
        for e in iter { acc = f(acc,e) }
        acc
    };
    let sum = fun iter {
        fold(\x,y{x+y}, 0, iter)
    };
    let prod = fun iter {
        fold(\x,y{x*y}, 1, iter)
    };
    let filter = fun f iter {
        let out = @make_array(0,nil);
        for e in iter {
            if f(e) { @append(out,e); }
        }
        out
    };
    let foreach = fun f a {
        for e in a { f(e) }
    };
    let to_iter = fun it {
        from @std.types use is_array is_function;
        if is_array(it) {
            let start = 0;
            let end = @len(it)-1;
            return fun {
                if start <= end {
                    let res = it[start];
                    start += 1;
                    res
                } else {
                    nil
                }
            };
        }
        if is_function(it) {
            return it;
        }
        @error("not an iterator");
    };
    let zip = fun xs ys {
        let xi = to_iter(xs);
        let yi = to_iter(ys);
        let result = @make_array(0,nil);
        loop {
            let x = xi();
            let y = yi();
            if x == nil or y == nil {
                break;
            }
            @append(result,[x,y]);
        }
        result
    };
};

## array functions
let array = module {
    from iter use map fold sum prod filter foreach;
    let reduce = fun f arr {
        if @len(arr) < 1 { 
            @error("reduce called on empty array")
        } else {
            let acc = arr[0];
            let i = 1;
            while i < @len(arr) {
                acc = f(acc,arr[i]);
                i += 1;
            }
            acc
        }
    };
    let reverse = fun arr {
        # reverses the array in place
        let back = @len(arr)-1;
        let front = 0;
        while back > front {
            let tmp = arr[back];
            arr[back] = arr[front];
            arr[front] = tmp;
            back -= 1;
            front += 1;
        }
        arr
    };
    let zip = fun xs ys {
        from utils use min;
        let minlen = min(@len(xs),@len(ys));
        let result = @make_array(minlen,nil);
        let i = 0;
        while i < minlen {
            result[i] = [xs[i],ys[i]];
            i += 1;
        }
        result
    };
    let unzip = fun pairs {
        let xs = @make_array(@len(pairs),nil);
        let ys = @make_array(@len(pairs),nil);
        let i = 0;
        for pair in pairs {
            let [x,y] = pair;
            xs[i] = x;
            ys[i] = y;
            i += 1;
        }
        [xs,ys]
    };
};

let methods = module {
    # these methods get called by the interpreter when field syntax is used
    # on a builin type like Array, Integer, etc...

    # the target is always the first argument so flip is often needed when
    # reusing normal functions.
    # ex: [1,2,3].map(\x{x+1}) becomes @std.methods.Array.map([1,2,3])(\x{x+1})

    from utils use rotr2 rotr3;

    let Array = module {
        from array use map fold sum prod filter reduce reverse;
        from builtin use len sort sort_by to_string;
        let map = rotr2(map);
        let fold = rotr3(fold);
        let filter = rotr2(filter);
        let reduce = rotr2(reduce);
    };

    let Float = module {
        from builtin use to_string to_integer to_float;
        from math use add sub mul div intdiv modulo exp log pow;
    };
    let Integer = Float;

    let String = module {
        from builtin use len to_string to_integer to_float to_array lines split;
    };

};

### prelude that contains essential functions.
let prelude = module {
    from utils use flip min max;
    from math use add sub mul div exp log pow;
    from time use elapsed;
    from iter use range map fold sum prod filter to_iter zip;
    from array use reduce reverse;
    from builtin use len to_string sort sort_by to_integer to_float to_array;
    from builtin use type_of;
    from types use is_error is_ref is_array is_number is_boolean is_object;
};
