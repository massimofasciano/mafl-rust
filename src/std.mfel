###
### this is the MFEL embedded standard library
###
### it is visisible through the @std module (ex: @std.array.map)
###

## iterators and iterator functions
let iter := module () {
    def range(start,end) {
        closure() {
            if start < end {
                let count := start;
                start := start + 1;
                count            
            }
            # no else clause means return unit when condition is false
        }
    }
    def collect(iter) {
        let out := @array(0,());
        for e in iter { @append(out,e); }
        out
    }
    def map(f,iter) {
        let out := @array(0,());
        for e in iter { @append(out,f(e)); }
        out
    }
    def fold(f,acc,iter) {
        for e in iter { acc := f(acc,e) }
        acc
    }
    def sum(iter) {
        fold(function(x,y){x+y}, 0, iter)
    }
    def prod(iter) {
        fold(function(x,y){x*y}, 1, iter)
    }
    def filter(f,iter) {
        let out := @array(0,());
        for e in iter {
            if f(e) { @append(out,e); }
        }
        out
    }
    def foreach(f,a) {
        for e in a { f(e) }
    }
};

## array functions
let array := module () {
    def reduce(f,arr) {
        if @len(arr) < 1 {
            ()
        } else {
            let acc := arr(0);
            let i := 1;
            while i < @len(arr) {
                acc := f(acc,arr(i));
                i := i + 1;
            }
            acc
        }
    }
    def reverse(arr) {
        # reverses the array in place
        let back := @len(arr)-1;
        let front := 0;
        while back > front {
            let tmp := arr(back);
            arr(back,arr(front));
            arr(front,tmp);
            back := back - 1;
            front := front + 1;
        }
        arr
    }
};
