###
### this is the MFEL embedded standard library
###
### it is visible through the @std module (ex: @std.array.map)
###

## time calculations
let time = module {
    let start = @now();
    defun elapsed {
        @now() - start
    } 
};

## iterators and iterator functions
let iter = module {
    defun range start end {
        fun {
            if start < end {
                let count = start;
                start += 1;
                count            
            }
        }
    }
    defun collect iter {
        let out = @array(0,nil);
        for e in iter { @append(out,e); }
        out
    }
    defun map f iter {
        let out = @array(0,nil);
        for e in iter { @append(out,f(e)); }
        out
    }
    defun fold f acc iter {
        for e in iter { acc = f(acc,e) }
        acc
    }
    defun sum iter {
        fold(\x y{x+y}, 0, iter)
    }
    defun prod iter {
        fold(\x y{x*y}, 1, iter)
    }
    defun filter f iter {
        let out = @array(0,nil);
        for e in iter {
            if f(e) { @append(out,e); }
        }
        out
    }
    defun foreach f a {
        for e in a { f(e) }
    }
};

## array functions
let array = module {
    let map = iter.map;
    let fold = iter.fold;
    let sum = iter.sum;
    let prod = iter.prod;
    let filter = iter.filter;
    let foreach = iter.foreach;
    defun reduce f arr {
        if @len(arr) < 1 { 
            @error("reduce called on empty array")
        } else {
            let acc = arr[0];
            let i = 1;
            while i < @len(arr) {
                acc = f(acc,arr[i]);
                i += 1;
            }
            acc
        }
    }
    defun reverse arr {
        # reverses the array in place
        let back = @len(arr)-1;
        let front = 0;
        while back > front {
            let tmp = arr[back];
            arr[back] = arr[front];
            arr[front] = tmp;
            back -= 1;
            front += 1;
        }
        arr
    }
};
